# .github/workflows/api-docs.yml

name: Generate API Documentation

on:
  workflow_run:
    workflows: ["Semantic Release Workflow"]
    types:
      - completed
    branches:
      - main

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  generate-api-docs:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Pages
      uses: actions/configure-pages@v3
        
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'corretto'
        java-version: '17'
        
    - name: Install Scala and Scaladoc
      run: |
        curl -fL https://github.com/coursier/launchers/raw/master/cs-x86_64-pc-linux.gz | gzip -d > cs
        chmod +x cs
        ./cs setup --yes
        echo "$HOME/.local/share/coursier/bin" >> $GITHUB_PATH
        
    - name: Get version info
      id: version
      run: |
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
        VERSION=${LATEST_TAG#v}
        MAJOR_VERSION=$(echo $VERSION | cut -d. -f1)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "major_version=$MAJOR_VERSION" >> $GITHUB_OUTPUT
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "Generated for version: $VERSION (major: $MAJOR_VERSION)"
        
    - name: Set execute permissions for gradlew
      run: chmod +x ./gradlew
        
    - name: Generate Scaladoc for both nodes
      run: |
        echo "Generating Scaladoc for Public API..."
        
        ./gradlew scaladoc -PincludePackages="org.example.api"
        
        # Create versioned documentation structure
        mkdir -p docs/api/v${{ steps.version.outputs.major_version }}
        
        # Copy Scaladoc output (use node1 as both should be identical for API)
        if [ -d "node1/build/docs/scaladoc" ]; then
          cp -r node1/build/docs/scaladoc/* docs/api/v${{ steps.version.outputs.major_version }}/
        else
          echo "Warning: Scaladoc not generated, creating placeholder"
          mkdir -p docs/api/v${{ steps.version.outputs.major_version }}
          echo "<html><body><h1>API Documentation</h1><p>Version ${{ steps.version.outputs.version }}</p></body></html>" > docs/api/v${{ steps.version.outputs.major_version }}/index.html
        fi
        
    - name: Extract Docker Compose Public API
      run: |
        mkdir -p docs/api/v${{ steps.version.outputs.major_version }}/docker
        
        # Install yq for YAML parsing
        sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        sudo chmod +x /usr/local/bin/yq
        
        echo "# Docker Compose Public API v${{ steps.version.outputs.major_version }}" > docs/api/v${{ steps.version.outputs.major_version }}/docker/deployment-api.md
        echo "" >> docs/api/v${{ steps.version.outputs.major_version }}/docker/deployment-api.md
        echo "**Version:** ${{ steps.version.outputs.version }}" >> docs/api/v${{ steps.version.outputs.major_version }}/docker/deployment-api.md
        echo "**Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> docs/api/v${{ steps.version.outputs.major_version }}/docker/deployment-api.md
        echo "" >> docs/api/v${{ steps.version.outputs.major_version }}/docker/deployment-api.md
        
        # Extract public API configuration using yq
        cat > extract_public_api.sh << 'EOF'
        #!/bin/bash
        
        # Extract public API header comments
        extract_api_header() {
          echo "## API Overview"
          echo ""
          sed -n '/^# Public API:/,/^$/p' docker-compose.yml | sed 's/^# *//' | sed 's/^#$//'
          echo ""
        }
        
        # Extract services marked as Public API
        extract_public_services() {
          echo "## Public Services"
          echo ""
          
          # Get services with "Public API" comment markers
          yq eval '.services | keys | .[]' docker-compose.yml | while read -r service; do
            # Check if service block has Public API comment above it
            service_line=$(grep -n "^  ${service}:" docker-compose.yml | cut -d: -f1)
            
            # Look for Public API comment in the 5 lines before service definition
            if [ -n "$service_line" ]; then
              start_line=$((service_line - 5))
              if [ $start_line -lt 1 ]; then start_line=1; fi
              
              if sed -n "${start_line},${service_line}p" docker-compose.yml | grep -q "# Public API:"; then
                echo "### $service"
                echo ""
                
                # Extract service-specific Public API comments
                sed -n "${start_line},$((service_line - 1))p" docker-compose.yml | \
                grep "# Public API:" | sed 's/^[ ]*# Public API: */- /'
                echo ""
                
                echo '```yaml'
                yq eval ".services.${service}" docker-compose.yml
                echo '```'
                echo ""
              fi
            fi
          done
        }
        
        # Extract public networks (those referenced in public services)
        extract_public_networks() {
          echo "## Public Networks"
          echo ""
          
          # Check if swarm-network is used (from the API comments)
          if yq eval '.networks | has("swarm-network")' docker-compose.yml | grep -q true; then
            echo "### swarm-network"
            echo ""
            echo "- Cluster overlay network for service communication"
            echo "- Part of deployment interface - name changes require MAJOR version bump"
            echo ""
            echo '```yaml'
            yq eval '.networks.swarm-network' docker-compose.yml
            echo '```'
            echo ""
          fi
        }
        
        # Execute extraction functions
        extract_api_header
        extract_public_services
        extract_public_networks
        EOF
        
        chmod +x extract_public_api.sh
        ./extract_public_api.sh >> docs/api/v${{ steps.version.outputs.major_version }}/docker/deployment-api.md
        
        # Clean up
        rm extract_public_api.sh
        
    - name: Create Docker API index
      run: |
        cat > docs/api/v${{ steps.version.outputs.major_version }}/docker/index.md << EOF
        # Docker Compose API v${{ steps.version.outputs.major_version }}
        
        - [Deployment Configuration](./deployment-api) - Service definitions and public interface
        EOF

    - name: Generate Version-specific Index
      run: |
        cat > docs/api/v${{ steps.version.outputs.major_version }}/index.md << EOF
        # Public API Documentation v${{ steps.version.outputs.major_version }}
        
        **Current Version:** ${{ steps.version.outputs.version }}  
        **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        ## 📨 Message Protocol API
        
        - [Scala API Documentation](./index.html) - Actor message protocols and service keys
        
        ## 🐳 Deployment API
        
        - [Docker Compose Interface](./docker/) - Service configuration and networking
        
        ## 📋 Semantic Versioning
        
        This API follows [Semantic Versioning 2.0.0](https://semver.org/):
        
        | Version Component | When to Increment | Examples |
        |------------------|-------------------|----------|
        | **MAJOR** (breaking) | Incompatible changes | Message protocol changes, port changes, service renames |
        | **MINOR** (feature) | Backward compatible features | New message types, optional configurations |
        | **PATCH** (fix) | Backward compatible fixes | Bug fixes, documentation updates |
        
        ## 🔄 Version History
        
        - [All API Versions](../) - Browse historical API documentation
        - [Migration Guide](https://github.com/brunoesposito2/DockerSwarmAkka/releases) - Breaking changes between versions
        
        ## 🚀 Quick Start
        
        ### Using the Message Protocol
        
        \`\`\`scala
        import org.example.api.protocol.{Ping, Pong}
        import org.example.api.discovery.ServiceKeys
        
        // Register service
        context.system.receptionist ! Receptionist.Register(ServiceKeys.PingServiceKey, context.self)
        
        // Send message
        pingService ! Ping(context.self)
        \`\`\`
        
        ### Deploying with Docker Compose
        
        \`\`\`bash
        # Set required environment variables
        export JOIN_TOKEN=\$(docker swarm join-token -q worker)
        export MANAGER_IP=\$(docker node inspect self --format '{{.Status.Addr}}')
        
        # Deploy the cluster
        docker-compose up -d
        \`\`\`
        EOF
        
    - name: Update Main API Index
      run: |
        # Create main index with all versions
        ls docs/api/ 2>/dev/null | grep "^v[0-9]" | sort -V -r > /tmp/versions.txt || echo "" > /tmp/versions.txt
        
        cat > docs/api/index.md << EOF
        # Akka Cluster Public API Documentation
        
        **Last Updated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        ## 📚 API Versions
        
        EOF
        
        if [ -s /tmp/versions.txt ]; then
          while read version; do
            if [ -f "docs/api/$version/index.md" ]; then
              echo "- [$version](./$version/) - Major version ${version#v}" >> docs/api/index.md
            fi
          done < /tmp/versions.txt
        else
          echo "- [v${{ steps.version.outputs.major_version }}](./v${{ steps.version.outputs.major_version }}/) - Major version ${{ steps.version.outputs.major_version }}" >> docs/api/index.md
        fi
        
        cat >> docs/api/index.md << EOF
        
        ## 🎯 What's in the Public API
        
        - **Message Protocol**: Actor messages (\`Ping\`, \`Pong\`) and service discovery keys
        - **Deployment Interface**: Docker Compose service definitions, ports, and networking
        
        ## 📖 Documentation Types
        
        - **Scala API**: Generated from source code comments (Scaladoc)
        - **Deployment API**: Extracted from Docker Compose configuration
        
        ## 🔄 Versioning Strategy
        
        - **Each major version** gets its own documentation
        - **Breaking changes** increment the major version
        - **Historical versions** remain available for migration reference
        
        ## 🚀 Getting Started
        
        1. **Choose the latest version** for new projects
        2. **Review breaking changes** when upgrading between major versions  
        3. **Follow the migration guides** in the GitHub releases
        
        ---
        
        Generated automatically from [brunoesposito2/DockerSwarmAkka](https://github.com/brunoesposito2/DockerSwarmAkka) releases.
        EOF
        
    - name: Create Jekyll config
      run: |
        cat > docs/_config.yml << EOF
        title: "Akka Cluster API Documentation"
        theme: minima
        markdown: kramdown
        highlighter: rouge
        plugins:
          - jekyll-feed
        EOF

    - name: Create main site index
      run: |
        cat > docs/index.md << EOF
        ---
        layout: default
        ---
        
        # 🎭 Akka Cluster Docker Swarm
        
        Distributed Akka cluster deployment using Docker Swarm with automated scaling and service discovery.
        
        ## 📚 API Documentation
        Complete public API documentation with versioning support.
        [→ Browse API Documentation](./api/v${{ steps.version.outputs.major_version }}/)
        
        ## 🚀 Quick Start
        Deploy the cluster with Docker Compose:
        \`\`\`bash
        git clone https://github.com/brunoesposito2/DockerSwarmAkka.git
        cd DockerSwarmAkka
        docker-compose up -d
        \`\`\`
        
        ## 🔗 Links
        - [GitHub Repository](https://github.com/brunoesposito2/DockerSwarmAkka)
        - [Releases](https://github.com/brunoesposito2/DockerSwarmAkka/releases)
        EOF

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./docs

    - name: Deploy to GitHub Pages
      uses: actions/deploy-pages@v4
        
    - name: Summary
      run: |
        echo "## 📖 API Documentation Generated Successfully" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Major Version:** v${{ steps.version.outputs.major_version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📁 Generated Documentation" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Scala API Documentation (Public packages only)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Docker Compose API Documentation" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Version-specific index page" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Main API index updated" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
        echo "- [View API Documentation](https://brunoesposito2.github.io/DockerSwarmAkka/)" >> $GITHUB_STEP_SUMMARY
        echo "- [Version v${{ steps.version.outputs.major_version }} Docs](https://brunoesposito2.github.io/DockerSwarmAkka/api/v${{ steps.version.outputs.major_version }}/)" >> $GITHUB_STEP_SUMMARY
