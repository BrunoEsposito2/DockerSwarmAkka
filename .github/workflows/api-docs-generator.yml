# .github/workflows/api-docs-generator.yml
name: Generate API Documentation

on:
  workflow_run:
    workflows: ["Semantic Release Workflow"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:  # Permette trigger manuale

permissions:
  contents: write  # Necessario per commit delle modifiche
  pull-requests: write

jobs:
  generate-api-docs:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'corretto'
        java-version: '17'

    - name: Get version info
      id: version
      run: |
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
        VERSION=${LATEST_TAG#v}
        MAJOR_VERSION=$(echo $VERSION | cut -d. -f1)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "major_version=$MAJOR_VERSION" >> $GITHUB_OUTPUT
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "Generated for version: $VERSION (major: $MAJOR_VERSION)"
        
    - name: Set execute permissions for gradlew
      run: chmod +x ./gradlew

    - name: Setup documentation structure
      run: |
        # Crea la struttura per la documentazione API
        mkdir -p api/v${{ steps.version.outputs.major_version }}/scala
        mkdir -p api/v${{ steps.version.outputs.major_version }}/docker

    - name: Generate Scaladoc
      run: |
        echo "Generating Scaladoc for Public API..."
        
        ./gradlew scaladoc -PincludePackages="org.example.api"
        
        # Copy Scaladoc output
        if [ -d "node1/build/docs/scaladoc" ]; then
          cp -r node1/build/docs/scaladoc/* api/v${{ steps.version.outputs.major_version }}/scala/
        else
          echo "Warning: Scaladoc not generated, creating placeholder"
          echo "---
            layout: default
            title: Scala API v${{ steps.version.outputs.major_version }}
            ---

            # Scala API Documentation v${{ steps.version.outputs.major_version }}

            Documentation generation in progress..." > api/v${{ steps.version.outputs.major_version }}/scala/index.md
        fi

    - name: Extract Docker API Documentation
      run: |
        # Install yq for YAML parsing
        sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        sudo chmod +x /usr/local/bin/yq
        
        cat > api/v${{ steps.version.outputs.major_version }}/docker/index.md << EOF
        ---
        layout: default
        title: Docker Compose API v${{ steps.version.outputs.major_version }}
        ---
        
        # Docker Compose Public API v${{ steps.version.outputs.major_version }}
        
        **Version:** ${{ steps.version.outputs.version }}  
        **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        ## API Overview
        
        This document describes the public interface for deploying the Akka cluster using Docker Compose.
        
        ## Public Services
        
        EOF
        
        # Extract services with their configuration
        yq eval '.services | keys | .[]' docker-compose.yml | while read -r service; do
          echo "### $service" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
          echo "" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
          echo '```yaml' >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
          yq eval ".services.${service}" docker-compose.yml >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
          echo '```' >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
          echo "" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
        done
        
        # Add networks section
        echo "## Networks" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
        echo "" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
        echo '```yaml' >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
        yq eval '.networks' docker-compose.yml >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
        echo '```' >> api/v${{ steps.version.outputs.major_version }}/docker/index.md

    - name: Create version-specific index
      run: |
        cat > api/v${{ steps.version.outputs.major_version }}/index.md << EOF
        ---
        layout: default
        title: API Documentation v${{ steps.version.outputs.major_version }}
        ---
        
        # Public API Documentation v${{ steps.version.outputs.major_version }}
        
        **Current Version:** ${{ steps.version.outputs.version }}  
        **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        ## 📨 Message Protocol API
        
        - [Scala API Documentation](./scala/) - Actor message protocols and service keys
        
        ## 🐳 Deployment API
        
        - [Docker Compose Interface](./docker/) - Service configuration and networking
        
        ## 🔄 Version History
        
        - [All API Versions](../index.html) - Browse historical API documentation
        - [Migration Guide](https://github.com/brunoesposito2/DockerSwarmAkka/releases) - Breaking changes between versions
        
        ## 📋 Semantic Versioning
        
        This API follows [Semantic Versioning 2.0.0](https://semver.org/):
        
        | Version Component | When to Increment | Examples |
        |------------------|-------------------|----------|
        | **MAJOR** (breaking) | Incompatible changes | Message protocol changes, port changes, service renames |
        | **MINOR** (feature) | Backward compatible features | New message types, optional configurations |
        | **PATCH** (fix) | Backward compatible fixes | Bug fixes, documentation updates |
        
        ## 🚀 Quick Start
        
        ### Using the Message Protocol
        
        \`\`\`scala
        import org.example.api.protocol.{Ping, Pong}
        import org.example.api.discovery.ServiceKeys
        
        // Register service
        context.system.receptionist ! Receptionist.Register(ServiceKeys.PingServiceKey, context.self)
        
        // Send message
        pingService ! Ping(context.self)
        \`\`\`
        
        ### Deploying with Docker Compose
        
        \`\`\`bash
        # Set required environment variables
        export JOIN_TOKEN=\$(docker swarm join-token -q worker)
        export MANAGER_IP=\$(docker node inspect self --format '{{.Status.Addr}}')
        
        # Deploy the cluster
        docker-compose up -d
        \`\`\`
        EOF

    - name: Update main API index
      run: |
        # Create or update main API index
        cat > api/index.md << EOF
        ---
        layout: default
        title: API Documentation
        ---
        
        # Akka Cluster Public API Documentation
        
        **Last Updated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        ## 📚 API Versions
        
        EOF
        
        # List all version directories
        ls api/ 2>/dev/null | grep "^v[0-9]" | sort -V -r | while read version; do
          if [ -f "api/$version/index.md" ]; then
            echo "- [${version}](./${version}/) - Major version ${version#v}" >> api/index.md
          fi
        done
        
        cat >> api/index.md << EOF
        
        ## 🎯 What's in the Public API
        
        - **Message Protocol**: Actor messages (\`Ping\`, \`Pong\`) and service discovery keys
        - **Deployment Interface**: Docker Compose service definitions, ports, and networking
        
        ## 📖 Documentation Types
        
        - **Scala API**: Generated from source code comments (Scaladoc)
        - **Deployment API**: Extracted from Docker Compose configuration
        
        ## 🔄 Versioning Strategy
        
        - **Each major version** gets its own documentation
        - **Breaking changes** increment the major version
        - **Historical versions** remain available for migration reference
        
        ## 🚀 Getting Started
        
        1. **Choose the latest version** for new projects
        2. **Review breaking changes** when upgrading between major versions  
        3. **Follow the migration guides** in the GitHub releases
        
        ---
        
        Generated automatically from [brunoesposito2/DockerSwarmAkka](https://github.com/brunoesposito2/DockerSwarmAkka) releases.
        EOF

    - name: Configure Git
      run: |
        git config --local user.name "github-actions[bot]"
        git config --local user.email "github-actions[bot]@users.noreply.github.com"

    - name: Commit and push documentation
      run: |
        git add api/
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "docs: update API documentation for v${{ steps.version.outputs.version }}

        [skip ci]

        - Updated API documentation for version ${{ steps.version.outputs.version }}
        - Generated Scala API documentation for public packages
        - Updated Docker Compose API documentation
        - Auto-generated from semantic release"
          
          git push
          echo "Documentation updated and pushed to repository"
        fi

    - name: Summary
      run: |
        echo "## 📖 API Documentation Generated Successfully" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Major Version:** v${{ steps.version.outputs.major_version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📁 Generated Documentation" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Scala API Documentation (Public packages only)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Docker Compose API Documentation" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Version-specific index page" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Main API index updated" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- Documentation committed to repository" >> $GITHUB_STEP_SUMMARY
        echo "- Jekyll will rebuild the site automatically" >> $GITHUB_STEP_SUMMARY
        echo "- Site will be available at: https://brunoesposito2.github.io/DockerSwarmAkka/" >> $GITHUB_STEP_SUMMARY