# .github/workflows/api-docs-generator.yml
name: Generate API Documentation

on:
  workflow_run:
    workflows: ["Semantic Release Workflow"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:  # Permette trigger manuale

permissions:
  contents: write  # Necessario per commit delle modifiche
  pull-requests: write

jobs:
  generate-api-docs:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'corretto'
        java-version: '17'

    - name: Get version info
      id: version
      run: |
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
        VERSION=${LATEST_TAG#v}
        MAJOR_VERSION=$(echo $VERSION | cut -d. -f1)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "major_version=$MAJOR_VERSION" >> $GITHUB_OUTPUT
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "Generated for version: $VERSION (major: $MAJOR_VERSION)"
        
    - name: Set execute permissions for gradlew
      run: chmod +x ./gradlew

    - name: Setup documentation structure
      run: |
        # Crea la struttura per la documentazione API
        mkdir -p api/v${{ steps.version.outputs.major_version }}/scala
        mkdir -p api/v${{ steps.version.outputs.major_version }}/docker

    - name: Generate Scaladoc
      run: |
        echo "Generating Scaladoc for both Node1 and Node2..."
        
        # Generate Scaladoc for both nodes
        ./gradlew node1:scaladoc node2:scaladoc -PincludePackages="org.example.api"
        
        # Setup directory structure for both nodes
        mkdir -p api/v${{ steps.version.outputs.major_version }}/scala/node1
        mkdir -p api/v${{ steps.version.outputs.major_version }}/scala/node2
        
        # Track generation status
        NODE1_GENERATED=false
        NODE2_GENERATED=false
        
        # Copy Node1 Scaladoc
        if [ -d "node1/build/docs/scaladoc" ] && [ "$(ls -A node1/build/docs/scaladoc 2>/dev/null)" ]; then
          echo "‚úÖ Scaladoc generated for Node1"
          cp -r node1/build/docs/scaladoc/* api/v${{ steps.version.outputs.major_version }}/scala/node1/
          NODE1_GENERATED=true
        else
          echo "‚ö†Ô∏è Scaladoc not generated for Node1"
          # Create placeholder
          mkdir -p api/v${{ steps.version.outputs.major_version }}/scala/node1
          echo "<html><body><h1>Node1 Documentation</h1><p>Generation failed for version ${{ steps.version.outputs.version }}</p></body></html>" > api/v${{ steps.version.outputs.major_version }}/scala/node1/index.html
        fi
        
        # Copy Node2 Scaladoc
        if [ -d "node2/build/docs/scaladoc" ] && [ "$(ls -A node2/build/docs/scaladoc 2>/dev/null)" ]; then
          echo "‚úÖ Scaladoc generated for Node2"
          cp -r node2/build/docs/scaladoc/* api/v${{ steps.version.outputs.major_version }}/scala/node2/
          NODE2_GENERATED=true
        else
          echo "‚ö†Ô∏è Scaladoc not generated for Node2"
          # Create placeholder
          mkdir -p api/v${{ steps.version.outputs.major_version }}/scala/node2
          echo "<html><body><h1>Node2 Documentation</h1><p>Generation failed for version ${{ steps.version.outputs.version }}</p></body></html>" > api/v${{ steps.version.outputs.major_version }}/scala/node2/index.html
        fi
        
        # Create main Scala API index page
        cat > api/v${{ steps.version.outputs.major_version }}/scala/index.md << EOF
        ---
        layout: default
        title: Scala API v${{ steps.version.outputs.major_version }}
        ---
        
        # Scala API Documentation v${{ steps.version.outputs.major_version }}
        
        **Version:** ${{ steps.version.outputs.version }}  
        **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        ## Node Documentation
        
        Complete Scala API documentation for both cluster nodes:
        
        EOF
        
        if [ "$NODE1_GENERATED" = true ]; then
          cat >> api/v${{ steps.version.outputs.major_version }}/scala/index.md << EOF
        ### üîß [Node1 Documentation](./node1/)
        - **Role**: Primary cluster node (Ping service provider)
        - **Port**: 2555
        - **Responsibilities**: Cluster coordination, ping initiation
        - **Status**: ‚úÖ Documentation available
        
        EOF
        else
          cat >> api/v${{ steps.version.outputs.major_version }}/scala/index.md << EOF
        ### üîß Node1 Documentation
        - **Role**: Primary cluster node (Ping service provider)  
        - **Port**: 2555
        - **Status**: ‚ùå Documentation generation failed
        
        EOF
        fi
        
        if [ "$NODE2_GENERATED" = true ]; then
          cat >> api/v${{ steps.version.outputs.major_version }}/scala/index.md << EOF
        ### üîß [Node2 Documentation](./node2/)
        - **Role**: Secondary cluster node (Pong service provider)
        - **Port**: 2551  
        - **Responsibilities**: Message response, worker services
        - **Status**: ‚úÖ Documentation available
        
        EOF
        else
          cat >> api/v${{ steps.version.outputs.major_version }}/scala/index.md << EOF
        ### üîß Node2 Documentation
        - **Role**: Secondary cluster node (Pong service provider)
        - **Port**: 2551
        - **Status**: ‚ùå Documentation generation failed
        
        EOF
        fi
        
        cat >> api/v${{ steps.version.outputs.major_version }}/scala/index.md << EOF
        ## Public API Overview
        
        Both nodes share the same public API packages:
        
        - **org.example.api.protocol** - Message protocol definitions (Ping, Pong)
        - **org.example.api.discovery** - Service discovery keys (PingServiceKey, PongServiceKey)
        
        ## Key Components
        
        ### Message Protocol
        \`\`\`scala
        trait Message
        
        case class Ping(replyTo: ActorRef[Pong]) extends Message
        case class Pong(replyTo: ActorRef[Ping]) extends Message
        \`\`\`
        
        ### Service Discovery
        \`\`\`scala
        val PingServiceKey: ServiceKey[Message] = ServiceKey[Message]("pingService")
        val PongServiceKey: ServiceKey[Message] = ServiceKey[Message]("pongService")
        \`\`\`
        
        ## Usage Examples
        
        ### Registering Services
        \`\`\`scala
        import org.example.api.discovery.ServiceKeys
        import akka.actor.typed.receptionist.Receptionist
        
        // Node1: Register ping service
        context.system.receptionist ! Receptionist.Register(
          ServiceKeys.PingServiceKey, context.self
        )
        
        // Node2: Register pong service  
        context.system.receptionist ! Receptionist.Register(
          ServiceKeys.PongServiceKey, context.self
        )
        \`\`\`
        
        ### Message Exchange
        \`\`\`scala
        import org.example.api.protocol.{Ping, Pong}
        
        // Node1: Send ping
        pongService ! Ping(context.self)
        
        // Node2: Handle ping, send pong
        case Ping(replyTo) =>
          println("Ping received")
          replyTo ! Pong(context.self)
        
        // Node1: Handle pong
        case Pong(replyTo) =>
          println("Pong received")  
          replyTo ! Ping(context.self)
        \`\`\`
        
        ## Architecture
        
        \`\`\`
        Node1 (Primary)     ‚Üê‚Üí     Node2 (Secondary)
        Port: 2555                 Port: 2551
        Service: Ping             Service: Pong
        Role: Coordinator         Role: Worker
        \`\`\`
        
        ---
        
        *Browse the individual node documentation above for complete API reference and implementation details.*
        EOF
        
        # Generate summary
        echo "üìö Scaladoc generation completed:"
        echo "  - Node1: $( [ "$NODE1_GENERATED" = true ] && echo "‚úÖ Success" || echo "‚ùå Failed" )"
        echo "  - Node2: $( [ "$NODE2_GENERATED" = true ] && echo "‚úÖ Success" || echo "‚ùå Failed" )"
    
    - name: Extract Docker API Documentation
      run: |
        # Install yq for YAML parsing
        sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        sudo chmod +x /usr/local/bin/yq
        
        cat > api/v${{ steps.version.outputs.major_version }}/docker/index.md << EOF
        ---
        layout: default
        title: Docker Compose API v${{ steps.version.outputs.major_version }}
        ---
        
        # Docker Compose Public API v${{ steps.version.outputs.major_version }}
        
        **Version:** ${{ steps.version.outputs.version }}  
        **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        ## API Overview
        
        This document describes the public interface for deploying the Akka cluster using Docker Compose.
        
        ## Public Services
        
        EOF
        
        # Create a summary table first
        echo "| Service | Ports | Networks |" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
        echo "|---------|-------|----------|" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
        
        # Extract service information in a clean table format
        yq eval '.services | keys | .[]' docker-compose.yml | while read -r service; do
          # Get ports (only the exposed ones)
          PORTS=$(yq eval ".services.${service}.ports // []" docker-compose.yml | grep -E "^\s*-" | sed 's/^.*"\([^"]*\)".*/\1/' | tr '\n' ', ' | sed 's/,$//')
          if [ -z "$PORTS" ]; then
            PORTS="none"
          fi
          
          # Get networks
          NETWORKS=$(yq eval ".services.${service}.networks // []" docker-compose.yml | grep -v "null" | tr '\n' ', ' | sed 's/,$//' | sed 's/^- //')
          if [ -z "$NETWORKS" ] || [ "$NETWORKS" = "null" ]; then
            NETWORKS="default"
          fi
          
          echo "| **$service** | \`$PORTS\` | \`$NETWORKS\` |" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
        done
        
        # Add detailed sections for each service
        echo "" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
        echo "## Service Details" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
        echo "" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
        
        yq eval '.services | keys | .[]' docker-compose.yml | while read -r service; do
          echo "### $service" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
          echo "" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
          
          # Extract only essential information
          echo "**Configuration:**" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
          
          # Ports
          PORTS=$(yq eval ".services.${service}.ports // []" docker-compose.yml)
          if [ "$PORTS" != "null" ] && [ "$PORTS" != "[]" ]; then
            echo "- **Ports:** \`$(echo "$PORTS" | grep -E "^\s*-" | sed 's/^.*"\([^"]*\)".*/\1/' | tr '\n' ',' | sed 's/,$//')\`" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
          fi
          
          # Networks
          NETWORKS=$(yq eval ".services.${service}.networks // []" docker-compose.yml)
          if [ "$NETWORKS" != "null" ] && [ "$NETWORKS" != "[]" ]; then
            echo "- **Networks:** \`$(echo "$NETWORKS" | tr '\n' ',' | sed 's/,$//' | sed 's/^- //')\`" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
          fi
          
          # Container name
          CONTAINER_NAME=$(yq eval ".services.${service}.container_name // null" docker-compose.yml)
          if [ "$CONTAINER_NAME" != "null" ]; then
            echo "- **Container Name:** \`$CONTAINER_NAME\`" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
          fi
          
          # Image (if not using build)
          IMAGE=$(yq eval ".services.${service}.image // null" docker-compose.yml)
          if [ "$IMAGE" != "null" ]; then
            echo "- **Image:** \`$IMAGE\`" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
          fi
          
          echo "" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
        done
        
        # Add networks section with essential info only
        echo "## Networks" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
        echo "" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
        
        yq eval '.networks | keys | .[]' docker-compose.yml | while read -r network; do
          echo "### $network" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
          echo "" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
          
          # Driver
          DRIVER=$(yq eval ".networks.${network}.driver // null" docker-compose.yml)
          if [ "$DRIVER" != "null" ]; then
            echo "- **Driver:** \`$DRIVER\`" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
          fi
          
          # Attachable
          ATTACHABLE=$(yq eval ".networks.${network}.attachable // null" docker-compose.yml)
          if [ "$ATTACHABLE" != "null" ]; then
            echo "- **Attachable:** \`$ATTACHABLE\`" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
          fi
          
          echo "" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
        done
        
        # Add environment variables section
        echo "## Required Environment Variables" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
        echo "" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
        echo "| Variable | Description | Example |" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
        echo "|----------|-------------|---------|" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
        echo "| \`JOIN_TOKEN\` | Docker Swarm worker join token | \`SWMTKN-1-...\` |" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
        echo "| \`MANAGER_IP\` | Docker Swarm manager IP address | \`192.168.1.100\` |" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
        echo "" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
        
        # Add usage example
        echo "## Usage Example" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
        echo "" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
        echo "\`\`\`bash" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
        echo "# Set required environment variables" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
        echo "export JOIN_TOKEN=\$(docker swarm join-token -q worker)" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
        echo "export MANAGER_IP=\$(docker node inspect self --format '{{.Status.Addr}}')" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
        echo "" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
        echo "# Deploy the cluster" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
        echo "docker-compose up -d" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
        echo "\`\`\`" >> api/v${{ steps.version.outputs.major_version }}/docker/index.md
        
        echo "üê≥ Docker API documentation generated with essential information only"

    - name: Create version-specific index
      run: |
        cat > api/v${{ steps.version.outputs.major_version }}/index.md << EOF
        ---
        layout: default
        title: API Documentation v${{ steps.version.outputs.major_version }}
        ---
        
        # Public API Documentation v${{ steps.version.outputs.major_version }}
        
        **Current Version:** ${{ steps.version.outputs.version }}  
        **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        ## üì® Message Protocol API
        
        - [**Scala API Documentation**](./scala/) - Complete documentation for both nodes
          - [Node1 (Primary)](./scala/node1/) - Ping service implementation
          - [Node2 (Secondary)](./scala/node2/) - Pong service implementation
        
        ## üê≥ Deployment API
        
        - [**Docker Compose Interface**](./docker/) - Service configuration and networking
        
        ## üèóÔ∏è Architecture Overview
        
        | Node | Role | Port | Service | Documentation |
        |------|------|------|---------|---------------|
        | **Node1** | Primary | 2555 | Ping | [View Docs](./scala/node1/) |
        | **Node2** | Secondary | 2551 | Pong | [View Docs](./scala/node2/) |
        
        ## üîÑ Version History
        
        - [All API Versions](../index.html) - Browse historical API documentation
        - [Migration Guide](https://github.com/brunoesposito2/DockerSwarmAkka/releases) - Breaking changes between versions
        
        ## üìã Semantic Versioning
        
        This API follows [Semantic Versioning 2.0.0](https://semver.org/):
        
        | Version Component | When to Increment | Examples |
        |------------------|-------------------|----------|
        | **MAJOR** (breaking) | Incompatible changes | Message protocol changes, port changes, service renames |
        | **MINOR** (feature) | Backward compatible features | New message types, optional configurations |
        | **PATCH** (fix) | Backward compatible fixes | Bug fixes, documentation updates |
        
        ## üöÄ Quick Start
        
        ### 1. Using the Message Protocol
        
        \`\`\`scala
        import org.example.api.protocol.{Ping, Pong}
        import org.example.api.discovery.ServiceKeys
        
        // Register services
        context.system.receptionist ! Receptionist.Register(ServiceKeys.PingServiceKey, context.self)
        context.system.receptionist ! Receptionist.Register(ServiceKeys.PongServiceKey, context.self)
        
        // Send messages
        pingService ! Ping(context.self)
        pongService ! Pong(context.self)
        \`\`\`
        
        ### 2. Deploying with Docker Compose
        
        \`\`\`bash
        # Set required environment variables
        export JOIN_TOKEN=\$(docker swarm join-token -q worker)
        export MANAGER_IP=\$(docker node inspect self --format '{{.Status.Addr}}')
        
        # Deploy both nodes
        docker-compose up -d
        \`\`\`
        
        ### 3. Monitoring the Cluster
        
        \`\`\`bash
        # Check cluster status
        docker node ls
        
        # View service logs
        docker logs -f worker1
        docker logs -f worker2
        \`\`\`
        
        ## üìñ Documentation Guide
        
        - **For API Users**: Check both [Node1](./scala/node1/) and [Node2](./scala/node2/) for complete interface coverage
        - **For Deployment**: Use [Docker API](./docker/) for service configuration
        - **For Migration**: Review [Release Notes](https://github.com/brunoesposito2/DockerSwarmAkka/releases) for version changes
        
        ---
        
        *This documentation covers the complete API surface for version ${{ steps.version.outputs.version }}*
        EOF

    - name: Update main API index
      run: |
        # Create or update main API index
        cat > api/index.md << EOF
        ---
        layout: default
        title: API Documentation
        ---
        
        # Akka Cluster Public API Documentation
        
        **Last Updated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        ## üìö API Versions
        
        EOF
        
        # List all version directories
        ls api/ 2>/dev/null | grep "^v[0-9]" | sort -V -r | while read version; do
          if [ -f "api/$version/index.md" ]; then
            echo "- [${version}](./${version}/) - Major version ${version#v}" >> api/index.md
          fi
        done
        
        cat >> api/index.md << EOF
        
        ## üéØ What's in the Public API
        
        - **Message Protocol**: Actor messages (\`Ping\`, \`Pong\`) and service discovery keys
        - **Deployment Interface**: Docker Compose service definitions, ports, and networking
        
        ## üìñ Documentation Types
        
        - **Scala API**: Generated from source code comments (Scaladoc)
        - **Deployment API**: Extracted from Docker Compose configuration
        
        ## üîÑ Versioning Strategy
        
        - **Each major version** gets its own documentation
        - **Breaking changes** increment the major version
        - **Historical versions** remain available for migration reference
        
        ## üöÄ Getting Started
        
        1. **Choose the latest version** for new projects
        2. **Review breaking changes** when upgrading between major versions  
        3. **Follow the migration guides** in the GitHub releases
        
        ---
        
        Generated automatically from [brunoesposito2/DockerSwarmAkka](https://github.com/brunoesposito2/DockerSwarmAkka) releases.
        EOF

    - name: Configure Git
      run: |
        git config --local user.name "github-actions[bot]"
        git config --local user.email "github-actions[bot]@users.noreply.github.com"

    - name: Commit and push documentation
      run: |
        git add api/
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "docs: update API documentation for v${{ steps.version.outputs.version }}

        [skip ci]

        - Updated API documentation for version ${{ steps.version.outputs.version }}
        - Generated Scala API documentation for public packages
        - Updated Docker Compose API documentation
        - Auto-generated from semantic release"
          
          git push
          echo "Documentation updated and pushed to repository"
        fi

    - name: Summary
      run: |
        echo "## üìñ API Documentation Generated Successfully" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Major Version:** v${{ steps.version.outputs.major_version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìÅ Generated Documentation" >> $GITHUB_STEP_SUMMARY
        
        # Check which Scaladoc was generated
        NODE1_STATUS="‚ùå"
        NODE2_STATUS="‚ùå"
        if [ -d "api/v${{ steps.version.outputs.major_version }}/scala/node1" ] && [ "$(ls -A api/v${{ steps.version.outputs.major_version }}/scala/node1 2>/dev/null)" ]; then
          NODE1_STATUS="‚úÖ"
        fi
        if [ -d "api/v${{ steps.version.outputs.major_version }}/scala/node2" ] && [ "$(ls -A api/v${{ steps.version.outputs.major_version }}/scala/node2 2>/dev/null)" ]; then
          NODE2_STATUS="‚úÖ"
        fi
        
        echo "- $NODE1_STATUS **Node1 Scaladoc** - Primary cluster node (Ping service)" >> $GITHUB_STEP_SUMMARY
        echo "- $NODE2_STATUS **Node2 Scaladoc** - Secondary cluster node (Pong service)" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ **Docker Compose API** - Services, ports, and networks configuration" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ **Version-specific index** - Complete API overview and navigation" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ **Main API index** - Historical versions and documentation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîó Access Documentation" >> $GITHUB_STEP_SUMMARY
        echo "- **Main Site**: https://brunoesposito2.github.io/DockerSwarmAkka/" >> $GITHUB_STEP_SUMMARY
        echo "- **API v${{ steps.version.outputs.major_version }}**: https://brunoesposito2.github.io/DockerSwarmAkka/api/v${{ steps.version.outputs.major_version }}/" >> $GITHUB_STEP_SUMMARY
        echo "- **Scala API Overview**: https://brunoesposito2.github.io/DockerSwarmAkka/api/v${{ steps.version.outputs.major_version }}/scala/" >> $GITHUB_STEP_SUMMARY
        echo "- **Node1 Scaladoc**: https://brunoesposito2.github.io/DockerSwarmAkka/api/v${{ steps.version.outputs.major_version }}/scala/node1/" >> $GITHUB_STEP_SUMMARY
        echo "- **Node2 Scaladoc**: https://brunoesposito2.github.io/DockerSwarmAkka/api/v${{ steps.version.outputs.major_version }}/scala/node2/" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker API**: https://brunoesposito2.github.io/DockerSwarmAkka/api/v${{ steps.version.outputs.major_version }}/docker/" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìä Generation Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Node1**: $( [ "$NODE1_STATUS" = "‚úÖ" ] && echo "Successfully generated" || echo "Generation failed" )" >> $GITHUB_STEP_SUMMARY
        echo "- **Node2**: $( [ "$NODE2_STATUS" = "‚úÖ" ] && echo "Successfully generated" || echo "Generation failed" )" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker API**: Essential configuration only" >> $GITHUB_STEP_SUMMARY
        echo "- **Structure**: Simple dual-node documentation" >> $GITHUB_STEP_SUMMARY