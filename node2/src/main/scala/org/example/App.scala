/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import akka.actor.typed.receptionist.Receptionist.Command
import akka.actor.typed.receptionist.{Receptionist, ServiceKey}
import akka.actor.typed.scaladsl.{ActorContext, Behaviors}
import akka.actor.typed.{ActorRef, ActorSystem, Behavior}
import akka.cluster.typed.Cluster
import com.typesafe.config.ConfigFactory
import org.example.WorkerOne.pongSelfRef

trait Message
final case class Pong(replyTo: ActorRef[Ping]) extends Message
final case class Ping(replyTo: ActorRef[Pong]) extends Message

val PongServiceKey = ServiceKey[Message]("pongService")
val PingServiceKey = ServiceKey[Message]("pingService")

object WorkerOne {
  var pongSelfRef: Option[ActorRef[Message]] = Option.empty[ActorRef[Message]]

  def apply(): WorkerOne = new WorkerOne()
}

class WorkerOne {
  def behavior(): Behavior[Message] =
    Behaviors.setup { context =>
      WorkerOne.pongSelfRef = Option(context.self)
      context.system.receptionist ! Receptionist.Register(PongServiceKey, context.self)
      Behaviors.receiveMessagePartial(getReachableBehavior(context))
    }

  protected def getReachableBehavior(context: ActorContext[Message]): PartialFunction[Message, Behavior[Message]] =
    case Pong(replyTo) =>
      println("Pong received")
      replyTo ! Ping(context.self)
      println("Ping sent")
      Behaviors.same
}

object App:
  case object FindPing extends Message
  case object Start extends Message
  private case class ListingResponse(listing: Receptionist.Listing) extends Message

  def main(args: Array[String]): Unit =
    var pingRef: ActorRef[Message] = null
    
    val system = ActorSystem(Behaviors.setup { ctx =>
      val listingResponseAdapter = ctx.messageAdapter[Receptionist.Listing](ListingResponse.apply)

      ctx.spawn(WorkerOne().behavior(), "WorkerOne")

      Behaviors.receiveMessage {
        case FindPing =>
          println("Finding ping actors...")
          ctx.system.receptionist ! Receptionist.Find(ServiceKey[Message]("pingService"), listingResponseAdapter)
          Behaviors.same
        case ListingResponse(PingServiceKey.Listing(listings)) =>
          println("Received pingService")
          if (listings.nonEmpty) pingRef = listings.head
          Behaviors.same
        case Start =>
          pingRef ! Ping(WorkerOne.pongSelfRef.get)
          Behaviors.same
      }
    }, "akka-cluster-system", ConfigFactory.load())

    val cluster = Cluster(system)

    while (pingRef == null) {
      system ! FindPing
      Thread.sleep(1000)
    }
    
    system ! Start
    println("Worker One executed successfully")
  
