import java.io.BufferedReader

/*
 * This file was generated by the Gradle 'init' task.
 *
 * The settings file is used to specify which projects to include in your build.
 * For more detailed information on multi-project builds, please refer to https://docs.gradle.org/8.7/userguide/multi_project_builds.html in the Gradle documentation.
 */

plugins {
    // Apply the foojay-resolver plugin to allow automatic download of JDKs
    id("org.gradle.toolchains.foojay-resolver-convention") version "0.8.0"
}

rootProject.name = "DockerSwarmProject"
include("app", "node2")
include("common")

open class DockerSwarmSetupTask: DefaultTask() {
    @TaskAction
    fun setupAndDeploy() {
        val initProcess = ProcessBuilder("docker", "swarm", "init").start()
        initProcess.waitFor()

        val tokenCommand = BufferedReader(java.io.InputStreamReader(initProcess.inputStream)).readLines()

        val joinToken = tokenCommand.find { it.startsWith("docker swarm join") }
            ?.substringAfter("--token ")
            ?.substringBefore(" ")
        if (joinToken == null)
            throw RuntimeException("Impossibile ottenere il token di join")

        println("Aggiunta nodo worker allo Swarm")
        val managerIp = getManagerIp(tokenCommand)
        println("manager ip: " + managerIp)
        val joinProcess = ProcessBuilder("docker", "swarm", "join", "--token", joinToken, managerIp).start()
        joinProcess.waitFor()

        println("Creazione rete overlay")
        val networkProcess = ProcessBuilder("docker", "network", "create", "--driver", "overlay", "swarm_network").start()
        networkProcess.waitFor()

        println("Deploy dello swarm")
        val composeProcess = ProcessBuilder("docker", "stack", "deploy", "-c", "docker-compose.yml", "worker-stack").start()
        composeProcess.waitFor()

        println("setup completato")
    }

    private fun getManagerIp(tc: List<String>): String {
        return if (tc.size == 1)
            tc[0].split(" ").last()
        else
            tc[tc.size - 1].split(" ").last()
    }
}