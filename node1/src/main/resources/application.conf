akka {
    java-flight-recorder {
      enabled = true
    }

  stream {

      # Default materializer settings
      materializer {

        # Initial size of buffers used in stream elements
        initial-input-buffer-size = 4
        # Maximum size of buffers used in stream elements
        max-input-buffer-size = 16

        # Fully qualified config path which holds the dispatcher configuration
        # or full dispatcher configuration to be used by ActorMaterializer when creating Actors.
        dispatcher = "akka.actor.default-dispatcher"

        # FQCN of the MailboxType. The Class of the FQCN must have a public
        # constructor with
        # (akka.actor.ActorSystem.Settings, com.typesafe.config.Config) parameters.
        # defaults to the single consumer mailbox for better performance.
        mailbox {
          mailbox-type = "akka.dispatch.SingleConsumerOnlyUnboundedMailbox"
        }

        # Fully qualified config path which holds the dispatcher configuration
        # or full dispatcher configuration to be used by stream operators that
        # perform blocking operations
        blocking-io-dispatcher = "akka.actor.default-blocking-io-dispatcher"

        # Cleanup leaked publishers and subscribers when they are not used within a given
        # deadline
        subscription-timeout {
          # when the subscription timeout is reached one of the following strategies on
          # the "stale" publisher:
          # cancel - cancel it (via `onError` or subscribing to the publisher and
          #          `cancel()`ing the subscription right away
          # warn   - log a warning statement about the stale element (then drop the
          #          reference to it)
          # noop   - do nothing (not recommended)
          mode = cancel

          # time after which a subscriber / publisher is considered stale and eligible
          # for cancelation (see `akka.stream.subscription-timeout.mode`)
          timeout = 5s
        }

        # Enable additional troubleshooting logging at DEBUG log level
        debug-logging = off

        # Log any stream stage error at the specified log level: "error", "warning", "info", "debug" or "off".
        # If there is an `akka.stream.Attributes.LogLevels` attribute defined for a specific stream this value is ignored
        # and the `onFailure` value of the attribute is applied instead.
        stage-errors-default-log-level = error

        # Maximum number of elements emitted in batch if downstream signals large demand
        output-burst-limit = 1000

        # Enable automatic fusing of all graphs that are run. For short-lived streams
        # this may cause an initial runtime overhead, but most of the time fusing is
        # desirable since it reduces the number of Actors that are created.
        # Deprecated, since Akka 2.5.0, setting does not have any effect.
        auto-fusing = on

        # Those stream elements which have explicit buffers (like mapAsync, mapAsyncUnordered,
        # buffer, flatMapMerge, Source.actorRef, Source.queue, etc.) will preallocate a fixed
        # buffer upon stream materialization if the requested buffer size is less than this
        # configuration parameter. The default is very high because failing early is better
        # than failing under load.
        #
        # Buffers sized larger than this will dynamically grow/shrink and consume more memory
        # per element than the fixed size buffers.
        max-fixed-buffer-size = 1000000000

        # Maximum number of sync messages that actor can process for stream to substream communication.
        # Parameter allows to interrupt synchronous processing to get upstream/downstream messages.
        # Allows to accelerate message processing that happening within same actor but keep system responsive.
        sync-processing-limit = 1000

        debug {
          # Enables the fuzzing mode which increases the chance of race conditions
          # by aggressively reordering events and making certain operations more
          # concurrent than usual.
          # This setting is for testing purposes, NEVER enable this in a production
          # environment!
          # To get the best results, try combining this setting with a throughput
          # of 1 on the corresponding dispatchers.
          fuzzing-mode = off
        }

        io.tcp {
          # The outgoing bytes are accumulated in a buffer while waiting for acknowledgment
          # of pending write. This improves throughput for small messages (frames) without
          # sacrificing latency. While waiting for the ack the stage will eagerly pull
          # from upstream until the buffer exceeds this size. That means that the buffer may hold
          # slightly more bytes than this limit (at most one element more). It can be set to 0
          # to disable the usage of the buffer.
          write-buffer-size = 16 KiB

          # In addition to the buffering described for property write-buffer-size, try to collect
          # more consecutive writes from the upstream stream producers.
          #
          # The rationale is to increase write efficiency by avoiding separate small
          # writes to the network which is expensive to do. Merging those writes together
          # (up to `write-buffer-size`) improves throughput for small writes.
          #
          # The idea is that a running stream may produce multiple small writes consecutively
          # in one go without waiting for any external input. To probe the stream for
          # data, this features delays sending a write immediately by probing the stream
          # for more writes. This works by rescheduling the TCP connection stage via the
          # actor mailbox of the underlying actor. Thus, before the stage is reactivated
          # the upstream gets another opportunity to emit writes.
          #
          # When the stage is reactivated and if new writes are detected another round-trip
          # is scheduled. The loop repeats until either the number of round trips given in this
          # setting is reached, the buffer reaches `write-buffer-size`, or no new writes
          # were detected during the last round-trip.
          #
          # This mechanism ensures that a write is guaranteed to be sent when the remaining stream
          # becomes idle waiting for external signals.
          #
          # In most cases, the extra latency this mechanism introduces should be negligible,
          # but depending on the stream setup it may introduce a noticeable delay,
          # if the upstream continuously produces small amounts of writes in a
          # blocking (CPU-bound) way.
          #
          # In that case, the feature can either be disabled, or the producing CPU-bound
          # work can be taken off-stream to avoid excessive delays (e.g. using `mapAsync` instead of `map`).
          #
          # A value of 0 disables this feature.
          coalesce-writes = 10
        }

        # Time to wait for async materializer creation before throwing an exception
        creation-timeout = 20 seconds

        //#stream-ref
        # configure defaults for SourceRef and SinkRef
        stream-ref {
          # Buffer of a SinkRef that is used to batch Request elements from the other side of the stream ref
          #
          # The buffer will be attempted to be filled eagerly even while the local stage did not request elements,
          # because the delay of requesting over network boundaries is much higher.
          buffer-capacity = 32

          # Demand is signalled by sending a cumulative demand message ("requesting messages until the n-th sequence number)
          # Using a cumulative demand model allows us to re-deliver the demand message in case of message loss (which should
          # be very rare in any case, yet possible -- mostly under connection break-down and re-establishment).
          #
          # The semantics of handling and updating the demand however are in-line with what Reactive Streams dictates.
          #
          # In normal operation, demand is signalled in response to arriving elements, however if no new elements arrive
          # within `demand-redelivery-interval` a re-delivery of the demand will be triggered, assuming that it may have gotten lost.
          demand-redelivery-interval = 1 second

          # Subscription timeout, during which the "remote side" MUST subscribe (materialize) the handed out stream ref.
          # This timeout does not have to be very low in normal situations, since the remote side may also need to
          # prepare things before it is ready to materialize the reference. However the timeout is needed to avoid leaking
          # in-active streams which are never subscribed to.
          subscription-timeout = 30 seconds

          # In order to guard the receiving end of a stream ref from never terminating (since awaiting a Completion or Failed
          # message) after / before a Terminated is seen, a special timeout is applied once Terminated is received by it.
          # This allows us to terminate stream refs that have been targeted to other nodes which are Downed, and as such the
          # other side of the stream ref would never send the "final" terminal message.
          #
          # The timeout specifically means the time between the Terminated signal being received and when the local SourceRef
          # determines to fail itself, assuming there was message loss or a complete partition of the completion signal.
          final-termination-signal-deadline = 2 seconds
        }
        //#stream-ref
      }

      # Deprecated, left here to not break Akka HTTP which refers to it
      blocking-io-dispatcher = "akka.actor.default-blocking-io-dispatcher"

      # Deprecated, will not be used unless user code refer to it, use 'akka.stream.materializer.blocking-io-dispatcher'
      # instead, or if from code, prefer the 'ActorAttributes.IODispatcher' attribute
      default-blocking-io-dispatcher = "akka.actor.default-blocking-io-dispatcher"
    }

    # configure overrides to ssl-configuration here (to be used by akka-streams, and akka-http – i.e. when serving https connections)
    ssl-config {
      protocol = "TLSv1.2"
    }


  remote {
    # Remote dispatcher configuration
    default-remote-dispatcher {
      type = "Dispatcher"
      executor = "fork-join-executor"
      fork-join-executor {
        parallelism-min = 2
        parallelism-factor = 0.5
        parallelism-max = 16
      }
      throughput = 10
    }

    deployment {
      # deprecated, use `enable-allow-list`
      enable-whitelist = off

      # If true, will only allow specific classes listed in `allowed-actor-classes` to be instanciated on this
      # system via remote deployment
      enable-allow-list = ${akka.remote.deployment.enable-whitelist}


      # deprecated, use `allowed-actor-classes`
      whitelist = []

      allowed-actor-classes = ${akka.remote.deployment.whitelist}
    }

    warn-about-direct-use = on
    use-unsafe-remote-features-outside-cluster = off
    warn-unsafe-watch-outside-cluster = on

    watch-failure-detector {
      # FQCN of the failure detector implementation.
      # It must implement akka.remote.FailureDetector and have
      # a public constructor with a com.typesafe.config.Config and
      # akka.actor.EventStream parameter.
      implementation-class = "akka.remote.PhiAccrualFailureDetector"

      # How often keep-alive heartbeat messages should be sent to each connection.
      heartbeat-interval = 1 s

      # Defines the failure detector threshold.
      # A low threshold is prone to generate many wrong suspicions but ensures
      # a quick detection in the event of a real crash. Conversely, a high
      # threshold generates fewer mistakes but needs more time to detect
      # actual crashes.
      threshold = 10.0

      # Number of the samples of inter-heartbeat arrival times to adaptively
      # calculate the failure timeout for connections.
      max-sample-size = 200

      # Minimum standard deviation to use for the normal distribution in
      # AccrualFailureDetector. Too low standard deviation might result in
      # too much sensitivity for sudden, but normal, deviations in heartbeat
      # inter arrival times.
      min-std-deviation = 100 ms

      # Number of potentially lost/delayed heartbeats that will be
      # accepted before considering it to be an anomaly.
      # This margin is important to be able to survive sudden, occasional,
      # pauses in heartbeat arrivals, due to for example garbage collect or
      # network drop.
      acceptable-heartbeat-pause = 10 s


      # How often to check for nodes marked as unreachable by the failure
      # detector
      unreachable-nodes-reaper-interval = 1s

      # After the heartbeat request has been sent the first failure detection
      # will start after this period, even though no heartbeat mesage has
      # been received.
      expected-response-after = 1 s
    }

    artery {
      enabled = on
      canonical {
        hostname = "worker1"
        port = 2555
      }
      transport = tcp
      large-message-destinations = [""]  # Or specify paths that handle large messages

      bind {
          # Port to bind a network interface to. Can be set to a port number
          # of one of the following special values:
          #   0    random available port
          #   ""   akka.remote.artery.canonical.port
          #
          port = ""

          # Hostname to bind a network interface to. Can be set to an ip, hostname
          # or one of the following special values:
          #   "0.0.0.0"            all interfaces
          #   ""                   akka.remote.artery.canonical.hostname
          #   "<getHostAddress>"   InetAddress.getLocalHost.getHostAddress
          #   "<getHostName>"      InetAddress.getLocalHost.getHostName
          #
          hostname = ""

          # Time to wait for Aeron/TCP to bind
          bind-timeout = 8s
        }
        advanced {
          materializer = ${akka.stream.materializer}
          use-dispatcher = "akka.remote.default-remote-dispatcher"
          use-control-stream-dispatcher = "akka.actor.internal-dispatcher"
          test-mode = off
          maximum-frame-size = 2 MiB
          buffer-pool-size = 128
          maximum-large-frame-size = 4 MiB
          large-buffer-pool-size = 32
          outbound-lanes = 1
          outbound-message-queue-size = 3072
          outbound-control-queue-size = 20000
          outbound-large-message-queue-size = 256
          inbound-lanes = 4
          system-message-buffer-size = 20000
          system-message-resend-interval = 1 second
          handshake-timeout = 20 seconds

                  # incomplete initial handshake attempt is retried with this interval
                  handshake-retry-interval = 1 second

                  # Handshake requests are performed periodically with this interval,
                  # also after the handshake has been completed to be able to establish
                  # a new session with a restarted destination system.
                  inject-handshake-interval = 1 second


                  # System messages that are not acknowledged after re-sending for this period are
                  # dropped and will trigger quarantine. The value should be longer than the length
                  # of a network partition that you need to survive.
                  give-up-system-message-after = 6 hours

                  # Outbound streams are stopped when they haven't been used for this duration.
                  # They are started again when new messages are sent.
                  stop-idle-outbound-after = 5 minutes

                  # Outbound streams are quarantined when they haven't been used for this duration
                  # to cleanup resources used by the association, such as compression tables.
                  # This will cleanup association to crashed systems that didn't announce their
                  # termination.
                  # The value should be longer than the length of a network partition that you
                  # need to survive.
                  # The value must also be greater than stop-idle-outbound-after.
                  # Once every 1/10 of this duration an extra handshake message will be sent.
                  # Therfore it's also recommended to use a value that is greater than 10 times
                  # the stop-idle-outbound-after, since otherwise the idle streams will not be
                  # stopped.
                  quarantine-idle-outbound-after = 6 hours

                  # Stop outbound stream of a quarantined association after this idle timeout, i.e.
                  # when not used any more.
                  stop-quarantined-after-idle = 3 seconds

                  # After catastrophic communication failures that could result in the loss of system
                  # messages or after the remote DeathWatch triggers the remote system gets
                  # quarantined to prevent inconsistent behavior.
                  # This setting controls how long the quarantined association will be kept around
                  # before being removed to avoid long-term memory leaks. It must be quarantined
                  # and also unused for this duration before it's removed. When removed the historical
                  # information about which UIDs that were quarantined for that hostname:port is
                  # gone which could result in communication with a previously quarantined node
                  # if it wakes up again. Therfore this shouldn't be set too low.
                  remove-quarantined-association-after = 1 h

                  # during ActorSystem termination the remoting will wait this long for
                  # an acknowledgment by the destination system that flushing of outstanding
                  # remote messages has been completed
                  shutdown-flush-timeout = 1 second

                  # Before sending notificaiton of terminated actor (DeathWatchNotification) other messages
                  # will be flushed to make sure that the Terminated message arrives after other messages.
                  # It will wait this long for the flush acknowledgement before continuing.
                  # The flushing can be disabled by setting this to `off`.
                  death-watch-notification-flush-timeout = 3 seconds

                  # See 'inbound-max-restarts'
                  inbound-restart-timeout = 5 seconds

                  # Max number of restarts within 'inbound-restart-timeout' for the inbound streams.
                  # If more restarts occurs the ActorSystem will be terminated.
                  inbound-max-restarts = 5

                  # Retry outbound connection after this backoff.
                  # Only used when transport is tcp or tls-tcp.
                  outbound-restart-backoff = 1 second

                  # See 'outbound-max-restarts'
                  outbound-restart-timeout = 5 seconds

                  # Max number of restarts within 'outbound-restart-timeout' for the outbound streams.
                  # If more restarts occurs the ActorSystem will be terminated.
                  outbound-max-restarts = 5

                  # compression of common strings in remoting messages, like actor destinations, serializers etc
                  compression {

                    actor-refs {
                      # Max number of compressed actor-refs
                      # Note that compression tables are "rolling" (i.e. a new table replaces the old
                      # compression table once in a while), and this setting is only about the total number
                      # of compressions within a single such table.
                      # Must be a positive natural number. Can be disabled with "off".
                      max = 256

                      # interval between new table compression advertisements.
                      # this means the time during which we collect heavy-hitter data and then turn it into a compression table.
                      advertisement-interval = 1 minute
                    }
                    manifests {
                      # Max number of compressed manifests
                      # Note that compression tables are "rolling" (i.e. a new table replaces the old
                      # compression table once in a while), and this setting is only about the total number
                      # of compressions within a single such table.
                      # Must be a positive natural number. Can be disabled with "off".
                      max = 256

                      # interval between new table compression advertisements.
                      # this means the time during which we collect heavy-hitter data and then turn it into a compression table.
                      advertisement-interval = 1 minute
                    }
                  }

                  # List of fully qualified class names of remote instruments which should
                  # be initialized and used for monitoring of remote messages.
                  # The class must extend akka.remote.artery.RemoteInstrument and
                  # have a public constructor with empty parameters or one ExtendedActorSystem
                  # parameter.
                  # A new instance of RemoteInstrument will be created for each encoder and decoder.
                  # It's only called from the stage, so if it dosn't delegate to any shared instance
                  # it doesn't have to be thread-safe.
                  # Refer to `akka.remote.artery.RemoteInstrument` for more information.
                  instruments = ${?akka.remote.artery.advanced.instruments} []

                  # Only used when transport is aeron-udp
                  aeron {
                    # Only used when transport is aeron-udp.
                    log-aeron-counters = false

                    # Controls whether to start the Aeron media driver in the same JVM or use external
                    # process. Set to 'off' when using external media driver, and then also set the
                    # 'aeron-dir'.
                    # Only used when transport is aeron-udp.
                    embedded-media-driver = on

                    # Directory used by the Aeron media driver. It's mandatory to define the 'aeron-dir'
                    # if using external media driver, i.e. when 'embedded-media-driver = off'.
                    # Embedded media driver will use a this directory, or a temporary directory if this
                    # property is not defined (empty).
                    # Only used when transport is aeron-udp.
                    aeron-dir = ""

                    # Whether to delete aeron embedded driver directory upon driver stop.
                    # Only used when transport is aeron-udp.
                    delete-aeron-dir = yes

                    # Level of CPU time used, on a scale between 1 and 10, during backoff/idle.
                    # The tradeoff is that to have low latency more CPU time must be used to be
                    # able to react quickly on incoming messages or send as fast as possible after
                    # backoff backpressure.
                    # Level 1 strongly prefer low CPU consumption over low latency.
                    # Level 10 strongly prefer low latency over low CPU consumption.
                    # Only used when transport is aeron-udp.
                    idle-cpu-level = 5

                    # messages that are not accepted by Aeron are dropped after retrying for this period
                    # Only used when transport is aeron-udp.
                    give-up-message-after = 60 seconds

                    # Timeout after which aeron driver has not had keepalive messages
                    # from a client before it considers the client dead.
                    # Only used when transport is aeron-udp.
                    client-liveness-timeout = 20 seconds

                    # Timout after after which an uncommitted publication will be unblocked
                    # Only used when transport is aeron-udp.
                    publication-unblock-timeout = 40 seconds

                    # Timeout for each the INACTIVE and LINGER stages an aeron image
                    # will be retained for when it is no longer referenced.
                    # This timeout must be less than the 'handshake-timeout'.
                    # Only used when transport is aeron-udp.
                    image-liveness-timeout = 10 seconds

                    # Timeout after which the aeron driver is considered dead
                    # if it does not update its C'n'C timestamp.
                    # Only used when transport is aeron-udp.
                    driver-timeout = 20 seconds
                  }

              # Only used when transport is tcp or tls-tcp.
              tcp {
                # Timeout of establishing outbound connections.
                connection-timeout = 5 seconds

                # The local address that is used for the client side of the TCP connection.
                outbound-client-hostname = ""
              }
        }

      ssl {
          enabled = false  # Set to true if you want to enable SSL
          ssl-engine-provider = ""  # Only needed if enabled = true
          # If you need SSL, you would also configure:
          # key-store = "/path/to/keystore"
          # key-store-password = "keystore-password"
          # trust-store = "/path/to/truststore"
          # trust-store-password = "truststore-password"
      }

      untrusted-mode = off
      trusted-selection-paths = []
      log-received-messages = off
      log-sent-messages = off
      log-frame-size-exceeding = off
    }
  }

  actor {
    provider = "cluster"
    allow-java-serialization = on

    internal-dispatcher {
      type = "Dispatcher"
      executor = "fork-join-executor"
      throughput = 5
      fork-join-executor {
        parallelism-min = 4
        parallelism-factor = 2.0
        parallelism-max = 64
      }
    }

    typed {
        # List FQCN of `akka.actor.typed.ExtensionId`s which shall be loaded at actor system startup.
          # Should be on the format: 'extensions = ["com.example.MyExtId1", "com.example.MyExtId2"]' etc.
          # See the Akka Documentation for more info about Extensions
          extensions = []

          # List FQCN of extensions which shall be loaded at actor system startup.
          # Library extensions are regular extensions that are loaded at startup and are
          # available for third party library authors to enable auto-loading of extensions when
          # present on the classpath. This is done by appending entries:
          # 'library-extensions += "Extension"' in the library `reference.conf`.
          #
          # Should not be set by end user applications in 'application.conf', use the extensions property for that
          #
          library-extensions = ${?akka.actor.typed.library-extensions} []

          # Receptionist is started eagerly to allow clustered receptionist to gather remote registrations early on.
          library-extensions += "akka.actor.typed.receptionist.Receptionist$"

          # While an actor is restarted (waiting for backoff to expire and children to stop)
          # incoming messages and signals are stashed, and delivered later to the newly restarted
          # behavior. This property defines the capacity in number of messages of the stash
          # buffer. If the capacity is exceed then additional incoming messages are dropped.
          restart-stash-capacity = 1000

          # Typed mailbox defaults to the single consumer mailbox as balancing dispatcher is not supported
          default-mailbox {
            mailbox-type = "akka.dispatch.SingleConsumerOnlyUnboundedMailbox"
          }
    }
  }

  cluster {
    seed-nodes = [
      "akka://akka-cluster-system@worker1:2555",
      "akka://akka-cluster-system@worker2:2551"
    ]
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }
}